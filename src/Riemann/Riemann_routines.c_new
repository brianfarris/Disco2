#define RIEMANN_PRIVATE_DEFS
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "../Headers/Riemann.h"
#include "../Headers/Sim.h"
#include "../Headers/Cell.h"
#include "../Headers/Face.h"
#include "../Headers/header.h"

void riemann_setup_rz(struct Riemann * theRiemann,struct Face * theFaces,struct Sim * theSim,int FaceNumber,int direction){
  theRiemann->n[direction]=1; // set
  int NUM_Q = sim_NUM_Q(theSim);
  double deltaL = face_deltaL(theFaces,FaceNumber);
  double deltaR = face_deltaR(theFaces,FaceNumber);
  theRiemann->cL = face_L_pointer(theFaces,FaceNumber);
  theRiemann->cR = face_R_pointer(theFaces,FaceNumber);
  double pL = cell_tiph(theRiemann->cL) - .5*cell_dphi(theRiemann->cL);
  double pR = cell_tiph(theRiemann->cR) - .5*cell_dphi(theRiemann->cR);   
  double dpL =  face_cm(theFaces,FaceNumber) - pL;
  double dpR = -face_cm(theFaces,FaceNumber) + pR;
  while( dpL >  M_PI ) dpL -= 2.*M_PI;
  while( dpL < -M_PI ) dpL += 2.*M_PI;
  while( dpR >  M_PI ) dpR -= 2.*M_PI;
  while( dpR < -M_PI ) dpR += 2.*M_PI;
  dpL = dpL;
  dpR = dpR;
  theRiemann->r = face_r(theFaces,FaceNumber);
  theRiemann->dA = face_dA(theFaces,FaceNumber);


  int q;
  for (q=0;q<NUM_Q;++q){
    theRiemann->primL[q] = cell_prim(theRiemann->cL,q) + cell_grad(theRiemann->cL,q)*deltaL + cell_gradp(theRiemann->cL,q)*dpL;
    theRiemann->primR[q] = cell_prim(theRiemann->cR,q) - cell_grad(theRiemann->cR,q)*deltaR - cell_gradp(theRiemann->cR,q)*dpR;
  }
  if (sim_runtype(theSim)==1){
    if (direction==RDIRECTION){
      theRiemann->primL[BRR] = 0.5*(theRiemann->primL[BRR] + theRiemann->primR[BRR]);
      theRiemann->primR[BRR] = 0.5*(theRiemann->primL[BRR] + theRiemann->primR[BRR]);
    } else if (direction==PDIRECTION){
      theRiemann->primL[BPP] = 0.5*(theRiemann->primL[BPP] + theRiemann->primR[BPP]);
      theRiemann->primR[BPP] = 0.5*(theRiemann->primL[BPP] + theRiemann->primR[BPP]);
    } else if (direction==ZDIRECTION){
      theRiemann->primL[BZZ] = 0.5*(theRiemann->primL[BZZ] + theRiemann->primR[BZZ]);
      theRiemann->primR[BZZ] = 0.5*(theRiemann->primL[BZZ] + theRiemann->primR[BZZ]);
    }
  }
}

void riemann_setup_p(struct Riemann * theRiemann,struct Cell *** theCells,struct Sim * theSim,int i,int j_low,int k,int direction){
  theRiemann->n[direction]=1; // set
  int NUM_Q = sim_NUM_Q(theSim);

  int j_hi;
  if (j_low == sim_N_p(theSim,i)-1){
    j_hi = 0;
  } else{
    j_hi = j_low+1;
  }
  theRiemann->cL = cell_single(theCells,i,j_low,k);
  theRiemann->cR = cell_single(theCells,i,j_hi ,k);
  double dpL = cell_dphi(theRiemann->cL);
  double dpR = cell_dphi(theRiemann->cR);
  double zm = sim_FacePos(theSim,k-1,Z_DIR);
  double zp = sim_FacePos(theSim,k,Z_DIR);
  double dz = zp-zm;
  double rm = sim_FacePos(theSim,i-1,R_DIR);
  double rp = sim_FacePos(theSim,i,R_DIR);
  double dr = rp-rm;
  double r = .5*(rp+rm);
  theRiemann->dA = dr*dz;
  theRiemann->r = r; 
  int q;
  for (q=0;q<NUM_Q;++q){
    theRiemann->primL[q] = cell_prim(theRiemann->cL,q) + 0.5*cell_gradp(theRiemann->cL,q)*dpL;
    theRiemann->primR[q] = cell_prim(theRiemann->cR,q) - 0.5*cell_gradp(theRiemann->cR,q)*dpR;
  }
  if (sim_runtype(theSim)==1){
    if (direction==RDIRECTION){
      theRiemann->primL[BRR] = 0.5*(theRiemann->primL[BRR] + theRiemann->primR[BRR]);
      theRiemann->primR[BRR] = 0.5*(theRiemann->primL[BRR] + theRiemann->primR[BRR]);
    } else if (direction==PDIRECTION){
      theRiemann->primL[BPP] = 0.5*(theRiemann->primL[BPP] + theRiemann->primR[BPP]);
      theRiemann->primR[BPP] = 0.5*(theRiemann->primL[BPP] + theRiemann->primR[BPP]);
    } else if (direction==ZDIRECTION){
      theRiemann->primL[BZZ] = 0.5*(theRiemann->primL[BZZ] + theRiemann->primR[BZZ]);
      theRiemann->primR[BZZ] = 0.5*(theRiemann->primL[BZZ] + theRiemann->primR[BZZ]);
    }
  }

}

void riemann_set_LR_flux(struct Riemann * theRiemann, struct Sim * theSim,double * p_vn_minus_cf,double * p_vn_plus_cf,int SetState){
  double DIVB_CH = sim_DIVB_CH(theSim);
  double GAMMALAW = sim_GAMMALAW(theSim);
  double r = theRiemann->r;
  double *prim;
  double *F;
  if (SetState==LEFT){
    prim = theRiemann->primL;
    F = theRiemann->FL;
  }else if (SetState==RIGHT){
    prim = theRiemann->primR;
    F = theRiemann->FR;
  } else{
    printf("ERROR\n");
    exit(0);
  }

  double rho = prim[RHO];
  double Pp  = prim[PPP];
  double vr  = prim[URR];
  double vp  = prim[UPP]*r;
  double vz  = prim[UZZ];
  double vn = vr*theRiemann->n[0] + vp*theRiemann->n[1] + vz*theRiemann->n[2];
  double rhoe = Pp/(GAMMALAW-1.);
  double v2 = vr*vr + vp*vp + vz*vz;
  F[DDD] = rho*vn;
  F[SRR] =  rho*vr*vn + Pp*theRiemann->n[0] ;
  F[LLL] =  rho*vp*vn + Pp*theRiemann->n[1] ;
  F[SZZ] =  rho*vz*vn + Pp*theRiemann->n[2] ;
  F[TAU] = ( .5*rho*v2 + rhoe + Pp )*vn ;

  double cf2 = GAMMALAW*(Pp/rho);

  if (sim_runtype(theSim)==MHD){ 
    double Br  = prim[BRR];
    double Bp  = prim[BPP];
    double Bz  = prim[BZZ];
    double Bn = Br*theRiemann->n[0] + Bp*theRiemann->n[1] + Bz*theRiemann->n[2];
    double vB = vr*Br + vp*Bp + vz*Bz;
    double B2 = Br*Br + Bp*Bp + Bz*Bz;

    double wp_a = sim_W_A(theSim,r);

    F[SRR] +=  .5*B2*theRiemann->n[0] - Br*Bn;
    F[LLL] +=  .5*B2*theRiemann->n[1] - Bp*Bn;
    F[SZZ] +=  .5*B2*theRiemann->n[2] - Bz*Bn;
    F[TAU] += B2*vn - vB*Bn;
    double psi = prim[PSI];
    F[BRR] = Br*vn - vr*Bn + psi*theRiemann->n[0];
    F[BPP] = Bp*vn - vp*Bn + wp_a*Bn + psi*theRiemann->n[1];
    F[BZZ] = Bz*vn - vz*Bn + psi*theRiemann->n[2];
    F[PSI] = pow(DIVB_CH,2.)*Bn + wp_a*psi*theRiemann->n[1];

    cf2 = .5*( cf2 + B2/rho + sqrt(fabs(  (cf2+B2/rho)*(cf2+B2/rho) - 4.0*(cf2)*Bn*Bn/rho )) );
  }

  *p_vn_plus_cf  = vn + sqrt(cf2);
  *p_vn_minus_cf = vn - sqrt(cf2);

  int q;
  for( q=sim_NUM_C(theSim) ; q<sim_NUM_Q(theSim) ; ++q ){
    F[q] = prim[q]*F[DDD];
  }

}

void riemann_set_vel(struct Riemann * theRiemann,struct Sim * theSim,double r){
  double Sl, Sr, Ss;

}

// Which state of the riemann problem are we in?
void riemann_set_state(struct Riemann * theRiemann,double w ){
  if (w < theRiemann->Sl){
    theRiemann->state=LEFT;
  }else if( w > theRiemann->Sr ){
    theRiemann->state=RIGHT;
  }else{
    if( w < theRiemann->Ss ){
      theRiemann->state=LEFTSTAR;
    }else{
      theRiemann->state=RIGHTSTAR;
    }
  }
}


void riemann_set_star_hllc(struct Riemann * theRiemann,struct Sim * theSim,double *Bpack,double GAMMALAW){
  double r = theRiemann->r;
  double *prim;
  double Sk;
  double *Uk;
  double *Fk;
  if (theRiemann->state==LEFTSTAR){
    prim = theRiemann->primL;
    Sk = theRiemann->Sl;
    Uk = theRiemann->UL;
    Fk = theRiemann->FL;
  }else{
    prim = theRiemann->primR;
    Sk = theRiemann->Sr;
    Uk = theRiemann->UR;
    Fk = theRiemann->FR;
  }
  double Sl=theRiemann->Sl;
  double Sr=theRiemann->Sr;
  double Ss=theRiemann->Ss;

  double rho = prim[RHO];
  double vr  = prim[URR];
  double vp  = prim[UPP]*r;
  double vz  = prim[UZZ];
  double Pp  = prim[PPP];
  double v2 = vr*vr+vp*vp+vz*vz;
  double vn = vr*theRiemann->n[0] + vp*theRiemann->n[1] + vz*theRiemann->n[2];
  double rhoe = Pp/(GAMMALAW-1.);
  double D  = rho;
  double mr = rho*vr;
  double mp = rho*vp;
  double mz = rho*vz;
  double E_hydro  = .5*rho*v2 + rhoe;
  double Ps  = rho*( Sk - vn )*( Ss - vn ) + Pp;
  double Dstar = ( Sk - vn )*D/( Sk - Ss );
  double Msn = Dstar*Ss;
  double Msr   = ( Sk - vn )*mr / ( Sk - Ss );
  double Msp   = ( Sk - vn )*mp / ( Sk - Ss );
  double Msz   = ( Sk - vn )*mz / ( Sk - Ss );
  double Estar = ( ( Sk - vn )*E_hydro + Ps*Ss - Pp*vn ) / ( Sk - Ss );
  
  if (sim_runtype(theSim)==MHD){
    double mnL = theRiemann->primL[RHO]*(theRiemann->primL[URR]*theRiemann->n[0]+theRiemann->primL[UPP]*r*theRiemann->n[1]+theRiemann->primL[UZZ]*theRiemann->n[2]);
    double mnR = theRiemann->primR[RHO]*(theRiemann->primR[URR]*theRiemann->n[0]+theRiemann->primR[UPP]*r*theRiemann->n[1]+theRiemann->primR[UZZ]*theRiemann->n[2]);


    double msr = ( -Sl*theRiemann->primL[RHO]*theRiemann->primL[URR] + Sr*theRiemann->primR[RHO]*theRiemann->primR[URR] + theRiemann->FL[SRR] - theRiemann->FR[SRR] )/( Sr - Sl );
    double msp = ( -Sl*theRiemann->primL[RHO]*theRiemann->primL[UPP]*r + Sr*theRiemann->primR[RHO]*theRiemann->primR[UPP]*r + theRiemann->FL[LLL] - theRiemann->FR[LLL] )/( Sr - Sl );
    double msz = ( -Sl*theRiemann->primL[RHO]*theRiemann->primL[UZZ] + Sr*theRiemann->primR[RHO]*theRiemann->primR[UZZ] + theRiemann->FL[SZZ] - theRiemann->FR[SZZ] )/( Sr - Sl );
    double rhos = ( -Sl*theRiemann->primL[RHO] + Sr*theRiemann->primR[RHO] + mnL - mnR )/( Sr - Sl );

    double Bsr = ( -Sl*theRiemann->primL[BRR] + Sr*theRiemann->primR[BRR] + theRiemann->FL[BRR] - theRiemann->FR[BRR] )/( Sr - Sl );
    double Bsp = ( -Sl*theRiemann->primL[BPP] + Sr*theRiemann->primR[BPP] + theRiemann->FL[BPP] - theRiemann->FR[BPP] )/( Sr - Sl );
    double Bsz = ( -Sl*theRiemann->primL[BZZ] + Sr*theRiemann->primR[BZZ] + theRiemann->FL[BZZ] - theRiemann->FR[BZZ] )/( Sr - Sl );
    double psi = ( -Sl*theRiemann->primL[PSI] + Sr*theRiemann->primR[PSI] + pow(DIVB_CH,2.)*BnL + wp_a*theRiemann->primL[PSI] - pow(DIVB_CH,2.)*BnR - theRiemann->n[1]*sim_W_A(theSim,r)*theRiemann->primR[PSI] )/( Sr - Sl );

    double Bsn = Bsr*theRiemann->n[0] + Bsp*theRiemann->n[1] + Bsz*theRiemann->n[2]; // Bn
    double vBs = (msr*Bsr + msp*Bsp + msz*Bsz)/rhos;

    double Br  = prim[BRR];
    double Bp  = prim[BPP];
    double Bz  = prim[BZZ];
    double B2 = Br*Br+Bp*Bp+Bz*Bz;
    double Bn = Br*theRiemann->n[0] + Bp*theRiemann->n[1] + Bz*theRiemann->n[2];
    double vB = vr*Br   + vp*Bp   + vz*Bz;
    double Bs2 = Bsr*Bsr+Bsp*Bsp+Bsz*Bsz;
    double Ps_mag = (.5*B2-Bn*Bn) - .5*Bs2 + Bsn*Bsn;
    Msr   += ( Br*Bn - Bsr*Bsn ) / ( Sk - Ss );
    Msp   += ( Bp*Bn - Bsp*Bsn ) / ( Sk - Ss );
    Msz   += ( Bz*Bn - Bsz*Bsn ) / ( Sk - Ss );
    Estar += ( ( Sk - vn )*.5*B2 + (Ps_mag+.5*Bs2)*Ss - .5*B2*vn - vBs*Bsn + vB*Bn ) / ( Sk - Ss );

    double BnL = theRiemann->primL[BRR]*theRiemann->n[0] 
      + theRiemann->primL[BPP]*theRiemann->n[1] 
      + theRiemann->primL[BZZ]*theRiemann->n[2];

    double BnR = theRiemann->primR[BRR]*theRiemann->n[0] 
      + theRiemann->primR[BPP]*theRiemann->n[1] 
      + theRiemann->primR[BZZ]*theRiemann->n[2];

    double wp_a = sim_W_A(theSim,r);

    theRiemann->Ustar[BRR] = Bsr/r;
    theRiemann->Ustar[BPP] = (Bsp + wp_a*(BnL-BnR)/(theRiemann->Sr-theRiemann->Sl))/r;
    theRiemann->Ustar[BZZ] = Bsz;
    theRiemann->Ustar[PSI] = psi;
  }
  double mn  = Msr*theRiemann->n[0] + Msp*theRiemann->n[1] + Msz*theRiemann->n[2];

  Msr += theRiemann->n[0]*( Msn - mn );
  Msp += theRiemann->n[1]*( Msn - mn );
  Msz += theRiemann->n[2]*( Msn - mn );

  theRiemann->Ustar[DDD] = Dstar;
  theRiemann->Ustar[SRR] = Msr;
  theRiemann->Ustar[LLL] = r*Msp;
  theRiemann->Ustar[SZZ] = Msz;
  theRiemann->Ustar[TAU] = Estar;

  int q;
  for( q=sim_NUM_C(theSim) ; q<sim_NUM_Q(theSim) ; ++q ){
    theRiemann->Ustar[q] = prim[q]*theRiemann->Ustar[DDD];
  }

  //Now set Fstar
  for (q=0;q<sim_NUM_Q(theSim);++q){
    theRiemann->Fstar[q] = Fk[q] + Sk*( theRiemann->Ustar[q] - Uk[q] ) ;
  }
}


void riemann_AddFlux(struct Riemann * theRiemann, struct Sim *theSim,double dt ){
  int NUM_Q = sim_NUM_Q(theSim);
  double GAMMALAW = sim_GAMMALAW(theSim);
  double DIVB_CH = sim_DIVB_CH(theSim);
  double vn_minus_cf_L,vn_plus_cf_L,vn_minus_cf_R,vn_plus_cf_R;

  riemann_set_LR_flux( theRiemann , theSim, &vn_minus_cf_L, &vn_plus_cf_L , LEFT); // get Fl
  riemann_set_LR_flux( theRiemann , theSim, &vn_minus_cf_R, &vn_plus_cf_R , RIGHT); // get Fr

  double Sl = vn_minus_cf_L;
  double Sr = vn_plus_cf_R;

  if (Sl > vn_minus_cf_R) Sl = vn_minus_cf_R;
  if (Sr < vn_plus_cf_R ) Sr = vn_plus_cf_R;

  double wp_a = theRiemann->n[1]*sim_W_A(theSim,r);
  if (sim_runtype(theSim)==MHD){
    if( Sl - wp_a > -DIVB_CH ) Sl = -DIVB_CH + wp_a;
    if( Sr - wp_a <  DIVB_CH ) Sr =  DIVB_CH + wp_a;
  }

  double vnL  = theRiemann->primL[URR]*theRiemann->n[0] 
    + theRiemann->primL[UPP]*theRiemann->n[1]
    + theRiemann->primL[UZZ]*theRiemann->n[2];
  double vnR  = theRiemann->primR[URR]*theRiemann->n[0] 
    + theRiemann->primR[UPP]*theRiemann->n[1]
    + theRiemann->primR[UZZ]*theRiemann->n[2];

  double Ss = (theRiemann->primR[RHO]*vnR*(Sr-vnR)-theRiemann->primL[RHO]*vnL*(Sl-vnL)+theRiemann->primL[PPP]-theRiemann->primR[PPP])
    /(theRiemann->primR[RHO]*(Sr-vnR)-theRiemann->primL[RHO]*(Sl-vnL));
 
  if (sim_runtype(theSim)==MHD){  
    double BrL =  theRiemann->primL[BRR];
    double BpL =  theRiemann->primL[BPP];
    double BzL =  theRiemann->primL[BZZ];
    double BrR =  theRiemann->primR[BRR];
    double BpR =  theRiemann->primR[BPP];
    double BzR =  theRiemann->primR[BZZ];

    double BnL  = BrL*theRiemann->n[0] 
      + BpL*theRiemann->n[1]
      + BzL*theRiemann->n[2];
    double BnR  = BrR*theRiemann->n[0] 
      + BpR*theRiemann->n[1]
      + BzR*theRiemann->n[2];

    double B2L = BrL*BrL + BpL*BpL + BzL*BzL;
    double B2R = BrR*BrR + BpR*BpR + BzR*BzR;

    Ss += ((.5*B2L-BnL*BnL)-.5*B2R+BnR*BnR) / (theRiemann->primR[RHO]*(Sr-vnR)-theRiemann->primL[RHO]*(Sl-vnL));
  }
  theRiemann->Sl = Sl;
  theRiemann->Sr = Sr;
  theRiemann->Ss = Ss;

  double w;
  if (theRiemann->n[PDIRECTION]){
    if( sim_MOVE_CELLS(theSim) == C_WRIEMANN ) cell_add_wiph(theRiemann->cL,theRiemann->Ss);
    w = cell_wiph(theRiemann->cL);
  } else{
    w = 0.0;
  }
  // which state of the riemann problem are we in?
  riemann_set_state(theRiemann,w);

  if (theRiemann->state==LEFT){
    cell_prim2cons( theRiemann->primL , theRiemann->UL , theRiemann->r , 1.0 ,theSim);
    int q;
    for (q=0;q<sim_NUM_Q(theSim) ; ++q ){
      theRiemann->F[q] = theRiemann->FL[q] - w*theRiemann->UL[q];// w is only nonzero when we are in phi direction
    }
  } else if (theRiemann->state==RIGHT){
    cell_prim2cons( theRiemann->primR , theRiemann->UR , theRiemann->r , 1.0 ,theSim);
    int q;
    for (q=0;q<sim_NUM_Q(theSim) ; ++q ){
      theRiemann->F[q] = theRiemann->FR[q] - w*theRiemann->UR[q];// w is only nonzero when we are in phi direction
    }
  } else{
    if (sim_Riemann(theSim)==HLL){
      cell_prim2cons( theRiemann->primL , theRiemann->UL , theRiemann->r , 1.0 ,theSim);//we need both
      cell_prim2cons( theRiemann->primR , theRiemann->UR , theRiemann->r , 1.0 ,theSim);
      riemann_set_star_hll(theRiemann,theSim);// get Ustar and Fstar
    } else if (sim_Riemann(theSim)==HLLC){
      if (theRiemann->state==LEFTSTAR){
        cell_prim2cons( theRiemann->primL , theRiemann->UL , theRiemann->r , 1.0 ,theSim);
        riemann_set_star_hllc(theRiemann,theSim,Bpack,GAMMALAW);// get Ustar and Fstar
      } else if (theRiemann->state==RIGHTSTAR){
        cell_prim2cons( theRiemann->primR , theRiemann->UR , theRiemann->r , 1.0 ,theSim);
        riemann_set_star_hllc(theRiemann,theSim,Bpack,GAMMALAW);// get Ustar and Fstar
      }
    } else{
      printf("ERROR\n");
      exit(0);
    }
    int q;
    for (q=0;q<sim_NUM_Q(theSim) ; ++q ){
      theRiemann->F[q] = theRiemann->Fstar[q] - w*theRiemann->Ustar[q];// w is only nonzero when we are in phi direction
    }
  }

  /*
     double mr = ( -Sl*theRiemann->primL[RHO]*theRiemann->primL[URR] + Sr*theRiemann->primR[RHO]*theRiemann->primR[URR] 
     + theRiemann->FL[SRR] - theRiemann->FR[SRR] )/( Sr - Sl );
     double mp = ( -Sl*theRiemann->primL[RHO]*theRiemann->primL[UPP]*r + Sr*theRiemann->primR[RHO]*theRiemann->primR[UPP]*r 
     + theRiemann->FL[LLL] - theRiemann->FR[LLL] )/( Sr - Sl );
     double mz = ( -Sl*theRiemann->primL[RHO]*theRiemann->primL[UZZ] + Sr*theRiemann->primR[RHO]*theRiemann->primR[UZZ] 
     + theRiemann->FL[SZZ] - theRiemann->FR[SZZ] )/( Sr - Sl );
     double rho = ( -Sl*theRiemann->primL[RHO] + Sr*theRiemann->primR[RHO] + mnL - mnR )/( Sr - Sl );
     */



}



